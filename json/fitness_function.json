{"cursor":"3493","size":15,"audio":[],"currentlang":"en","article":"A 'fitness function' is a particular type of objective function that is used to\nsummarise, as a single figure of merit, how close a given design solution is to\nachieving the set aims.\n\nIn particular, in the fields of genetic programming and genetic algorithms, each\ndesign solution is represented as a string of numbers (referred to as a\nchromosome). After each round of testing, or simulation, the idea is to delete\nthe 'n' worst design solutions, and to breed 'n' new ones from the best design\nsolutions. Each design solution, therefore, needs to be awarded a figure of\nmerit, to indicate how close it came to meeting the overall specification, and\nthis is generated by applying the fitness function to the test, or simulation,\nresults obtained from that solution.\n\nThe reason that genetic algorithms are not a lazy way of performing design\nwork is precisely because of the effort involved in designing a workable\nfitness function. Even though it is no longer the human designer, but the\ncomputer, that comes up with the final design, it is the human designer who\nhas to design the fitness function. If this is designed wrongly, the algorithm\nwill either converge on an inappropriate solution, or will have difficulty\nconverging at all.\n\nMoreover, the fitness function must not only correlate closely with the\ndesigner's goal, it must also be computed quickly. Speed of execution is very\nimportant, as a typical genetic algorithm must be iterated many times in order\nto produce a usable result for a non-trivial problem.\n\nFitness approximation may be appropriate, especially in the following cases:\n* Fitness computation time of a single solution is extremely high\n* Precise model for fitness computation is missing\n* The fitness function is uncertain or noisy.\n\nTwo main classes of fitness functions exist: one where the fitness function does\nnot change, as in optimizing a fixed function or testing with a fixed set of\ntest cases; and one where the fitness function is mutable, as in niche\ndifferentiation or co-evolving the set of test cases.\n\nAnother way of looking at fitness functions is in terms of a fitness landscape,\nwhich shows the fitness for each possible chromosome.\n\nDefinition of the fitness function is not straightforward in many cases and\noften is performed iteratively if the fittest solutions produced by GA are not\nwhat is desired. In some cases, it is very hard or impossible to come up even\nwith a guess of what fitness function definition might be. Interactive genetic\nalgorithms address this difficulty by outsourcing evaluation to external agents\n(normally humans).\n","linknr":-1,"url":"fitness_function","recorded":1376428026,"links":[],"instances":["genetic_algorithm","genetic_algorithm"],"pdf":[],"categories":["Genetic algorithms"],"headings":["See also","References"],"image":[],"tags":[["chromosome","genetic_algorithm"],["crossover","genetic_algorithm"]],"members":["crossover","chromosome"],"related":["Objective_function","Figure_of_merit","Genetic_programming","Genetic_algorithm","Chromosome_(genetic_algorithm)","Crossover_(genetic_algorithm)","Fitness_approximation","Niche_differentiation","Co-evolution","Fitness_landscape","Interactive_genetic_algorithms","Evolutionary_computation","Inferential_programming","PDF","PDF","Evolutionary_robotics"]}